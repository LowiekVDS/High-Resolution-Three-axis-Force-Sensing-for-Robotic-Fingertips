<?xml version='1.0' encoding='UTF-8'?>
<root>
 <tabbed_widget parent="main_window" name="Main Window">
  <Tab containers="1" tab_name="tab1">
   <Container>
    <DockSplitter sizes="0.500497;0.499503" count="2" orientation="-">
     <DockArea name="...">
      <plot style="Lines" flip_y="false" flip_x="false" mode="TimeSeries">
       <range left="0.000000" top="2.859100" bottom="-6.564402" right="36.240921"/>
       <limitY/>
       <curve color="#1ac938" name="F_z [N]"/>
       <curve color="#9467bd" name="F_x [N]"/>
       <curve color="#17becf" name="F_y [N]"/>
      </plot>
     </DockArea>
     <DockArea name="...">
      <plot style="Lines" flip_y="false" flip_x="false" mode="TimeSeries">
       <range left="0.000000" top="3343.826072" bottom="-39049.565822" right="36.240921"/>
       <limitY/>
       <curve color="#ff7f0e" name="Z0 [uT]">
        <transform alias="Z0 [uT][Outlier Removal]" name="Scale/Offset">
         <options time_offset="0" value_offset="10300" value_scale="1"/>
        </transform>
       </curve>
       <curve color="#1ac938" name="F_z [N]">
        <transform alias="F_z [N][Scale/Offset]" name="Scale/Offset">
         <options time_offset="0" value_offset="0" value_scale="6000"/>
        </transform>
       </curve>
      </plot>
     </DockArea>
    </DockSplitter>
   </Container>
  </Tab>
  <Tab containers="1" tab_name="tab2">
   <Container>
    <DockSplitter sizes="0.500497;0.499503" count="2" orientation="-">
     <DockArea name="...">
      <plot style="Lines" flip_y="false" flip_x="false" mode="TimeSeries">
       <range left="0.000000" top="3.297295" bottom="-3.297873" right="36.240921"/>
       <limitY/>
       <curve color="#f14cc1" name="planar_angle"/>
      </plot>
     </DockArea>
     <DockArea name="...">
      <plot style="Lines" flip_y="false" flip_x="false" mode="TimeSeries">
       <range left="0.000000" top="6.434214" bottom="-2.149225" right="36.240921"/>
       <limitY/>
       <curve color="#9467bd" name="F_x [N]">
        <transform alias="F_x [N][Moving Average]" name="Moving Average">
         <options compensate_offset="false" value="10"/>
        </transform>
       </curve>
       <curve color="#17becf" name="F_y [N]">
        <transform alias="F_y [N][Moving Average]" name="Moving Average">
         <options compensate_offset="false" value="10"/>
        </transform>
       </curve>
       <curve color="#bcbd22" name="xy_mag"/>
       <curve color="#1ac938" name="mag">
        <transform alias="mag[Moving Average]" name="Moving Average">
         <options compensate_offset="true" value="10"/>
        </transform>
       </curve>
      </plot>
     </DockArea>
    </DockSplitter>
   </Container>
  </Tab>
  <Tab containers="1" tab_name="tab3">
   <Container>
    <DockSplitter sizes="1" count="1" orientation="-">
     <DockArea name="...">
      <plot style="Lines" flip_y="false" flip_x="false" mode="TimeSeries">
       <range left="1.681605" top="0.557304" bottom="-6.508261" right="36.240921"/>
       <limitY/>
       <curve color="#1f77b4" name="X0 [uT]"/>
       <curve color="#d62728" name="Y0 [uT]"/>
       <curve color="#9467bd" name="F_x [N]">
        <transform alias="F_x [N][Scale/Offset]" name="Scale/Offset">
         <options time_offset="0" value_offset="0" value_scale="3000"/>
        </transform>
       </curve>
       <curve color="#1ac938" name="F_z [N]"/>
      </plot>
     </DockArea>
    </DockSplitter>
   </Container>
  </Tab>
  <currentTabIndex index="2"/>
 </tabbed_widget>
 <use_relative_time_offset enabled="1"/>
 <!-- - - - - - - - - - - - - - - -->
 <!-- - - - - - - - - - - - - - - -->
 <Plugins>
  <plugin ID="DataLoad CSV">
   <default time_axis="t_wall [s]" delimiter="0"/>
  </plugin>
  <plugin ID="DataLoad MCAP"/>
  <plugin ID="DataLoad ROS bags">
   <use_header_stamp value="false"/>
   <discard_large_arrays value="true"/>
   <max_array_size value="100"/>
   <boolean_strings_to_number value="true"/>
   <remove_suffix_from_strings value="true"/>
  </plugin>
  <plugin ID="DataLoad ULog"/>
  <plugin ID="MQTT Subscriber (Mosquitto)"/>
  <plugin ID="ROS Topic Subscriber">
   <use_header_stamp value="false"/>
   <discard_large_arrays value="true"/>
   <max_array_size value="100"/>
   <boolean_strings_to_number value="true"/>
   <remove_suffix_from_strings value="true"/>
  </plugin>
  <plugin ID="UDP Server"/>
  <plugin ID="WebSocket Server"/>
  <plugin ID="ZMQ Subscriber"/>
  <plugin ID="Fast Fourier Transform"/>
  <plugin ID="Quaternion to RPY"/>
  <plugin ID="Reactive Script Editor">
   <library code="--[[ Helper function to create a series from arrays&#xa;&#xa; new_series: a series previously created with ScatterXY.new(name)&#xa; prefix:     prefix of the timeseries, before the index of the array&#xa; suffix_X:   suffix to complete the name of the series containing the X value. If [nil], use the index of the array.&#xa; suffix_Y:   suffix to complete the name of the series containing the Y value&#xa; timestamp:   usually the tracker_time variable&#xa;              &#xa; Example:&#xa; &#xa; Assuming we have multiple series in the form:&#xa; &#xa;   /trajectory/node.{X}/position/x&#xa;   /trajectory/node.{X}/position/y&#xa;   &#xa; where {N} is the index of the array (integer). We can create a reactive series from the array with:&#xa; &#xa;   new_series = ScatterXY.new(&quot;my_trajectory&quot;) &#xa;   CreateSeriesFromArray( new_series, &quot;/trajectory/node&quot;, &quot;position/x&quot;, &quot;position/y&quot;, tracker_time );&#xa;--]]&#xa;&#xa;function CreateSeriesFromArray( new_series, prefix, suffix_X, suffix_Y, timestamp )&#xa;  &#xa;  --- clear previous values&#xa;  new_series:clear()&#xa;  &#xa;  --- Append points to new_series&#xa;  index = 0&#xa;  while(true) do&#xa;&#xa;    x = index;&#xa;    -- if not nil, get the X coordinate from a series&#xa;    if suffix_X ~= nil then &#xa;      series_x = TimeseriesView.find( string.format( &quot;%s.%d/%s&quot;, prefix, index, suffix_X) )&#xa;      if series_x == nil then break end&#xa;      x = series_x:atTime(timestamp)&#x9; &#xa;    end&#xa;    &#xa;    series_y = TimeseriesView.find( string.format( &quot;%s.%d/%s&quot;, prefix, index, suffix_Y) )&#xa;    if series_y == nil then break end &#xa;    y = series_y:atTime(timestamp)&#xa;    &#xa;    new_series:push_back(x,y)&#xa;    index = index+1&#xa;  end&#xa;end&#xa;&#xa;--[[ Similar to the built-in function GetSeriesNames(), but select only the names with a give prefix. --]]&#xa;&#xa;function GetSeriesNamesByPrefix(prefix)&#xa;  -- GetSeriesNames(9 is a built-in function&#xa;  all_names = GetSeriesNames()&#xa;  filtered_names = {}&#xa;  for i, name in ipairs(all_names)  do&#xa;    -- check the prefix&#xa;    if name:find(prefix, 1, #prefix) then&#xa;      table.insert(filtered_names, name);&#xa;    end&#xa;  end&#xa;  return filtered_names&#xa;end&#xa;&#xa;--[[ Modify an existing series, applying offsets to all their X and Y values&#xa;&#xa; series: an existing timeseries, obtained with TimeseriesView.find(name)&#xa; delta_x: offset to apply to each x value&#xa; delta_y: offset to apply to each y value &#xa;  &#xa;--]]&#xa;&#xa;function ApplyOffsetInPlace(series, delta_x, delta_y)&#xa;  -- use C++ indeces, not Lua indeces&#xa;  for index=0, series:size()-1 do&#xa;    x,y = series:at(index)&#xa;    series:set(index, x + delta_x, y + delta_y)&#xa;  end&#xa;end&#xa;"/>
   <scripts/>
  </plugin>
  <plugin ID="CSV Exporter"/>
  <plugin ID="ROS /rosout Visualization"/>
  <plugin ID="ROS Topic Re-Publisher"/>
 </Plugins>
 <!-- - - - - - - - - - - - - - - -->
 <previouslyLoaded_Datafiles>
  <fileInfo prefix="" filename="../scripts/2x2_sensor/data/H1_sensor0_air_20231116_171459.csv">
   <selected_datasources value=""/>
   <plugin ID="DataLoad CSV">
    <default time_axis="t_wall [s]" delimiter="0"/>
   </plugin>
  </fileInfo>
  <fileInfo prefix="" filename="../scripts/FT300-S_force_torque/data/H1_sensor0_air_20231116_171501.csv">
   <selected_datasources value=""/>
   <plugin ID="DataLoad CSV">
    <default time_axis="t_wall [s]" delimiter="0"/>
   </plugin>
  </fileInfo>
 </previouslyLoaded_Datafiles>
 <!-- - - - - - - - - - - - - - - -->
 <customMathEquations>
  <snippet name="mag">
   <global></global>
   <function>return math.sqrt(value^2 + v1^2 + v2^2)</function>
   <linked_source>F_x [N]</linked_source>
   <additional_sources>
    <v1>F_y [N]</v1>
    <v2>F_z [N]</v2>
   </additional_sources>
  </snippet>
  <snippet name="xy_mag">
   <global></global>
   <function>return math.sqrt(value^2 + v1^2)</function>
   <linked_source>F_x [N]</linked_source>
   <additional_sources>
    <v1>F_y [N]</v1>
    <v2>planar_angle</v2>
   </additional_sources>
  </snippet>
  <snippet name="planar_angle">
   <global></global>
   <function>return math.atan(value, v1)</function>
   <linked_source>F_x [N]</linked_source>
   <additional_sources>
    <v1>F_y [N]</v1>
   </additional_sources>
  </snippet>
 </customMathEquations>
 <snippets/>
 <!-- - - - - - - - - - - - - - - -->
</root>

